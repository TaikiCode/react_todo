{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","type","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","console","log","updatedTodos","removedArr","filter","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56d389f7.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nconst TodoForm = (props) => {\n  const [input, setInput] = useState(props.edit ? props.edit.value : \"\");\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 1000),  // id生成\n      text: input,  \n    });\n    setInput(\"\"); // 更新\n  };\n\n  return (\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\n      {props.edit ? (\n        <>\n          <input\n            type=\"text\"\n            placeholder=\"タスクを編集してください\"\n            value={input}\n            onChange={handleChange}\n            name=\"text\"\n            ref={inputRef}\n            className=\"todo-input edit\"\n          />\n          <button className=\"todo-button edit\" onClick={handleSubmit}>編集</button>\n        </>\n      ) : (\n        <>\n          <input\n            type=\"text\"\n            placeholder=\"タスクを入力してください\"\n            value={input}\n            onChange={handleChange}\n            name=\"text\"\n            ref={inputRef}\n            className=\"todo-input\"\n          />\n          <button className=\"todo-button\" onClick={handleSubmit}>追加</button>\n        </>\n      )}\n    </form>\n  );\n};\n\nexport default TodoForm;\n","import React, { useState } from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport { RiCloseCircleLine } from \"react-icons/ri\";\nimport { TiEdit } from \"react-icons/ti\";\n\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: \"\",\n  });\n\n  const submitUpdate = (value) => {\n    updateTodo(edit.id, value);\n    setEdit({\n      id: null,\n      value: \"\",\n    });\n  };\n\n  if (edit.id) {\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return todos.map((todo, index) => (\n    <div\n      className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\n      key={index}\n    >\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n        {todo.text}\n      </div>\n      <div className=\"icons\">\n        <RiCloseCircleLine\n          onClick={() => removeTodo(todo.id)}\n          className=\"delete-icon\"\n        />\n        <TiEdit\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\n          className=\"edit-icon\"\n        />\n      </div>\n    </div>\n  ));\n};\n\nexport default Todo;\n","import React, { useState } from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport Todo from \"./Todo\";\n\nconst TodoList = () => {\n  const [todos, setTodos] = useState([]);\n\n  const addTodo = (todo) => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n\n    const newTodos = [todo, ...todos];\n\n    setTodos(newTodos);\n    console.log(...todos);\n  };\n\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n    setTodos((prev) =>\n      prev.map((item) => (item.id === todoId ? newValue : item))\n    );\n  };\n\n  const completeTodo = (id) => {\n    let updatedTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  // タスク削除\n  const removeTodo = (id) => {\n    const removedArr = [...todos].filter((todo) => todo.id !== id);\n    setTodos(removedArr);\n  };\n\n  return (\n    <>\n      <h1>ToDoリスト</h1>\n      <TodoForm onSubmit={addTodo} />\n      <Todo\n        todos={todos}\n        completeTodo={completeTodo}\n        removeTodo={removeTodo}\n        updateTodo={updateTodo}\n      />\n    </>\n  );\n};\n\nexport default TodoList;\n","import \"./App.css\";\nimport TodoList from \"./components/TodoList\";\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}